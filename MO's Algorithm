#include<bits/stdc++.h>
using namespace std;

#define ll long long
int N,Q;
ll current_answer;
#define M 100007

ll answers[50500];
ll blocksize;
ll arr[100100];

int cnt[100100];

pair<pair<int,int>,int >queries[50010];


inline bool mo_cmp(const pair< pair<int,int>, int>&x,
                   const pair< pair<int,int>,int>&y)
{
    int block_x=x.first.first/blocksize;
    int block_y=y.first.first/blocksize;
    if(block_x!=block_y)
    {
        return block_x < block_y;
    }
    return x.first.second < y.first.second;
}

inline void add(int x)
{
    if(cnt[x]==0)
    {
        cnt[x]++;
        current_answer++;
    }
    else
    {
        cnt[x]++;
    }
}

inline void remove(int x)
{
    if(cnt[x]==1)
    {
        cnt[x]--;
        current_answer--;
    }
    else
    {
        cnt[x]--;
    }
}

int main()
{
    int t,kase=0;
    scanf("%d",&t);
    while(kase<t)
    {
    scanf("%d %d",&N,&Q);
    blocksize=static_cast<int>(sqrt(N))+1;
    for(int i=0;i<N;i++)
    {
        scanf("%d",&arr[i]);
    }
    for(int i=0;i<Q;i++)
    {
        int x,y;
        scanf("%d %d",&x,&y);
        queries[i].first.first=x-1;
        queries[i].first.second=y-1;;
        queries[i].second=i;
    }
    sort(queries,queries+Q,mo_cmp);
    int mo_left=0,mo_right=-1;

    for(int i=0;i<Q;i++)
    {
        int left=queries[i].first.first;
        int right=queries[i].first.second;
        while(mo_right <right)
        {
            mo_right++;
            add(arr[mo_right]);
        }
        while(mo_right >right)
        {
            remove(arr[mo_right]);
            mo_right--;
        }
        while(mo_left<left)
        {
            remove(arr[mo_left]);
            mo_left++;
        }
        while(mo_left>left)
        {
            mo_left--;
            add(arr[mo_left]);
        }
//        cout<<current_answer<<endl;
        answers[queries[i].second]=current_answer;
    }
    printf("Case %d:\n",kase+1);
    for(int i=0;i<Q;i++)
    {
        printf("%d\n",answers[i]);
    }
    pair<pair<int,int>,int >p;
    p.first.first=0;
    p.first.second=0;
    p.second=0;
    for(int i=0;i<M;i++)
    {
//        answers[i]=0;
        arr[i]=0;
        cnt[i]=0;
//        queries[i]=p;
//        current_answer=0;
    }
    current_answer=0;
    kase++;
    }
    return 0;
}
