
//In the Name of Allah Most Gracious, Most Merciful//
/*If you want something you've never had, you have  to do something you never did.*/



//LIS nlogn implementation

#include<bits/stdc++.h>
using namespace std;


#define pb push_back
#define ll long long
#define pii pair<int,int>
#define pll pair<ll,ll>
#define M 100007
#define INF 1e9
#define INFL 1e18
#define PI acos(-1)
#define mp make_pair
#define fast_in_out ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
//const int fx[]= {+1,-1,+0,+0};
//const int fy[]= {+0,+0,+1,-1};
//const int fx[]={+0,+0,+1,-1,-1,+1,-1,+1};   // Kings Move
//const int fy[]={-1,+1,+0,+0,+1,+1,-1,-1};  // Kings Move
//const int fx[]={-2, -2, -1, -1,  1,  1,  2,  2};  // Knights Move
//const int fy[]={-1,  1, -2,  2, -2,  2, -1,  1}; // Knights Move

vector<int>tail(M,0);
vector<int>v;

int n;
int getCeilIndex(int l,int r,int key)
{
    while(r-l>1)
    {
        int m=l+(r-l)/2;
        if(v[tail[m]]>=key)
        {
            r=m;
        }
        else
        {
            l=m;
        }
    }
    return r;
}


int longestIncreasingSubsequence()
{
    int len=1;
    vector<int>prev(M,-1);
    for(int i=1;i<n;i++)
    {
        if(v[i]<v[tail[0]])
        {
            tail[0]=i;
        }
        else if(v[i]>v[tail[len-1]])
        {
            prev[i]=tail[len-1];
            tail[len++]=i;
        }
        else
        {
            int pos=getCeilIndex(-1,len-1,v[i]);
            prev[i]=tail[pos-1];
            tail[pos]=i;
        }
    }
    cout<<"LIS"<<endl;
    for(int i=tail[len-1];i>=0;i=prev[i])
    {
        cout<<v[i]<<" ";
    }
    cout<<endl;
    return len;
}
int main()
{
    fast_in_out;
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    cin>>n;
    for(int i=0;i<n;i++)
    {
        int x;
        cin>>x;
        v.pb(x);
    }
    int ans=longestIncreasingSubsequence();
    cout<<"LENGTH "<<ans<<endl;
    return 0;
}


