
//In the Name of Allah Most Gracious, Most Merciful//
/*If you want something you've never had, you have  to do something you never did.*/

#include<bits/stdc++.h>
using namespace std;


#define pb push_back
#define ll long long
#define pii pair<int,int>
#define pll pair<ll,ll>
#define M 10000007
#define INF 1e9
#define INFL 1e18
#define PI acos(-1)
#define mp make_pair
#define fast_in_out ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
//const int fx[]= {+1,-1,+0,+0};
//const int fy[]= {+0,+0,+1,-1};
//const int fx[]={+0,+0,+1,-1,-1,+1,-1,+1};   // Kings Move
//const int fy[]={-1,+1,+0,+0,+1,+1,-1,-1};  // Kings Move
//const int fx[]={-2, -2, -1, -1,  1,  1,  2,  2};  // Knights Move
//const int fy[]={-1,  1, -2,  2, -2,  2, -1,  1}; // Knights Move
#define SIZE 100100


vector<int>prime;
bool mark[M+10];


int arr[SIZE];


void sieve()
{
    int i,j;
    prime.push_back(2);
    for(i=3;i*i<=M;i+=2)
    {
        if(mark[i]==false)
        {
            for(j=i*i;j<=M;j+=2*i)
                mark[j]=true;
        }
    }
    for(i=3;i<=M;i+=2)
    {
        if(mark[i]==false)
            prime.push_back(i);
    }

}

int segmentedSieve(int a,int b)
{
    if(a==1)
        a++;
    int sqrtN=sqrt(b);
    memset(arr,0,sizeof arr);
    for(int i=0;i<prime.size();i++)
    {
        int p=prime[i];
        int j=p*p;
        if(j<a)
            j=((a+p-1)/p)*p;
        for( ;j<=b;j+=p)
        {
            arr[j-a]=1;
        }
    }
    int ans=0;
    for(int i=a;i<=b;i++)
    {
        if(arr[i-a]==0)
            ans++;
    }
    return ans;
}
int main()
{
    fast_in_out;
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    sieve();
    int a,b;
    cin>>a>>b;
    int ans=segmentedSieve(a,b);

    cout<<ans<<endl;
    return 0;
}


