
//In the Name of Allah Most Gracious, Most Merciful//
/*If you want something you've never had, you have  to do something you never did.*/

#include<bits/stdc++.h>
using namespace std;


#define pb push_back
#define ll long long
#define pii pair<int,int>
#define pll pair<ll,ll>
#define M 100007
#define INF 1e9
#define INFL 1e18
#define PI acos(-1)
#define mp make_pair

//const int fx[]= {+1,-1,+0,+0};
//const int fy[]= {+0,+0,+1,-1};
//const int fx[]={+0,+0,+1,-1,-1,+1,-1,+1};   // Kings Move
//const int fy[]={-1,+1,+0,+0,+1,+1,-1,-1};  // Kings Move
//const int fx[]={-2, -2, -1, -1,  1,  1,  2,  2};  // Knights Move
//const int fy[]={-1,  1, -2,  2, -2,  2, -1,  1}; // Knights Move

struct node
{
    int endmark;
    node* next[2];
    node()
    {
        endmark=0;
        next[0]=NULL;
        next[1]=NULL;
    }
}*root;

void insert_node(int num)
{
    node* curr=root;
    for(int i=31;i>=0;i--)
    {
        int rem=(num&(1<<i))!=0;
      //  cout<<rem;
        if(curr->next[rem]==NULL)
        {
            curr->next[rem]=new node();
        }

        curr=curr->next[rem];
        curr->endmark++;
    }
}

void query_node(int num)
{
    ll sum=0;
    node* curr=root;
    for(int i=31;i>=0;i--)
    {
        int rem=!(((num &(1<<i)))!=0);
       // cout<<i<<" "<<rem<<endl;
//        cout<<rem;
        if((curr->next[rem]!=NULL) && (curr->next[rem]->endmark)>0)
        {
            sum+=(1<<i);
            curr=curr->next[rem];
        }
        else
        {
            curr=curr->next[!rem];
        }
    }
    printf("%lld\n",sum);

}

void delete_node(int num)
{
    node* curr=root;
    for(int i=31;i>=0;i--)
    {
        int rem=((num &(1<<i))!=0);
        curr=curr->next[rem];
        curr->endmark--;
    }
}
int main()
{

   //  #ifndef ONLINE_JUDGE
   //    freopen("input.txt","r",stdin);
   //    freopen("output.txt","w",stdout);
  //   #endif
  root=new node();
    int n;
    cin>>n;
    insert_node(0);
    while(n--)
    {
        char ch;
        int num;
        cin>>ch>>num;
        if(ch=='+')
        {
            insert_node(num);
        }
        else if(ch=='-')
        {
            delete_node(num);
        }
        else
        {
            query_node(num);
        }
    }

///Before submit=>
///    *check for integer overflow,array bounds
///    *check for n=1
}
