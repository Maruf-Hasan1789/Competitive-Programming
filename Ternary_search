
//In the Name of Allah Most Gracious, Most Merciful//
/*If you want something you've never had, you have  to do something you never did.*/

#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;





#define pb push_back
#define ll long long
#define pii pair<int,int>
#define pll pair<ll,ll>
#define MaxN 201007
#define INF 1e9
#define INFL 1e18
#define PI acos(-1)
#define mp make_pair

typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update>ordered_set;

//const int fx[]= {+1,-1,+0,+0};
//const int fy[]= {+0,+0,+1,-1};
//const int fx[]={+0,+0,+1,-1,-1,+1,-1,+1};   // Kings Move
//const int fy[]={-1,+1,+0,+0,+1,+1,-1,-1};  // Kings Move
//const int fx[]={-2, -2, -1, -1,  1,  1,  2,  2};  // Knights Move
//const int fy[]={-1,  1, -2,  2, -2,  2, -1,  1}; // Knights Move


int gcd(int a, int b)
{
 return b ? gcd(b, a%b) : a;
}

ll bigmod(ll b,ll p,ll m)
{
    ll res=1LL%m;
    ll x=b%m;
    while(p)
    {
        if( p & 1LL )res=(res*x) % m;
        x=(x*x)%m;
        p >>=1LL;
    }
    return res;
}
int arr[MaxN];

//ternary search upon integers

int ternary_search(int l,int r,int x)
{
    if(r>=l)
    {
        int mid1=l+(r-l)/3;
        int mid2=r-(r-l)/3;
        if(arr[mid1]==x)
            return mid1;
        if(arr[mid2]==x)
            return mid2;
        if(x<arr[mid1])
            return ternary_search(l,mid1-1,x);
        if(x>arr[mid2])
            return ternary_search(mid1+1,r,x);
        else
            return ternary_search(mid1+1,mid2-1,x);
    }
    return -1;
}


double eval_func(double x)
{
    return x*x+2*x+3;
}
double ternary_search_float(double l,double r)
{
    for(int i=0;i<200;i++)
    {
        double l1=(l*2+r)/3;
        double l2=(l+r*2)/3;
        if(eval_func(l1)>eval_func(l2))
        {
            r=l2;
        }
        else
        {
            l=l1;
        }
    }
    double x=l;
    return eval_func(x);
}


double ternary_search(double l,double r)
{
    double eps=1e-9;
    while(r-l>eps)
    {
        double m1=l+(r-l)/3;
        double m2=r-(r-l)/3;
        double f1=eval_func(m1);
        double f2=eval_func(m2);
        if(f1<f2)
            l=m1;
        else
            r=m2;
    }
    return eval_func(l);
}



int main()
{

   //  #ifndef ONLINE_JUDGE
   //    freopen("input.txt","r",stdin);
   //    freopen("output.txt","w",stdout);
  //   #endif






//#ifdef LOCAL_DEFINE
  //  cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC << " s.\n";
// #endif
///Before submit=>
///    *check for integer overflow,array bounds
///    *check for n=1
}

