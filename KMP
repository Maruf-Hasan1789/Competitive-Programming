
//In the Name of Allah Most Gracious, Most Merciful//
/*If you want something you've never had, you have  to do something you never did.*/

#include<bits/stdc++.h>
using namespace std;


#define pb push_back
#define ll long long
#define pii pair<int,int>
#define pll pair<ll,ll>

#define INF 1e9
#define INFL 1e18
#define PI acos(-1)
#define mp make_pair

//const int fx[]= {+1,-1,+0,+0};
//const int fy[]= {+0,+0,+1,-1};
//const int fx[]={+0,+0,+1,-1,-1,+1,-1,+1};   // Kings Move
//const int fy[]={-1,+1,+0,+0,+1,+1,-1,-1};  // Kings Move
//const int fx[]={-2, -2, -1, -1,  1,  1,  2,  2};  // Knights Move
//const int fy[]={-1,  1, -2,  2, -2,  2, -1,  1}; // Knights Move










void computeLPSArray(char* pat,int M,int* lps)
{
    //length of the previous longest prefix suffix
    int len=0;
    lps[0]=0;
    //the loop calculates lps[i] for i=1 to M-1
    int i=1;
    while(i<M)
    {
      if(pat[i]==pat[len])
      {
          len++;
          lps[i]=len;
          i++;
      }
      else //(pat[i] !=pat[LEN]
      {
          if(len!=0)
          {
              len=lps[len-1];
              //also note that we do not
              //increment i here
          }
          else //len==0
          {
              lps[i]=0;
              i++;
          }
      }
    }
}



int KMPsearch(char* text,char* pat)
{
    int cnt=0;
    int M=strlen(pat);
    int N=strlen(text);
    int lps[M+10];

    computeLPSArray(pat,M,lps);
    int i=0;
    int j=0;
    while(i<N)
    {
        if(pat[j]==text[i])
        {
            j++;
            i++;
        }
        if(j==M)
        {
            cnt++;
           // cout<<"FOUND PATTERN AT "<<i-j<<endl;
            j=lps[j-1];
        }
    //mismatch after ja matches
    else if(i<N && pat[j]!=text[i])
    {
        //do not match lps[0...lps[j-1] characters
        //they will match anyway
        if(j!=0)
        {
            j=lps[j-1];
        }
        else
        {
            i++;
        }
    }

    }

    return cnt;
}


int main()
{

   //  #ifndef ONLINE_JUDGE
   //    freopen("input.txt","r",stdin);
   //    freopen("output.txt","w",stdout);
  //   #endif
  int t;
  cin>>t;
  int kase=0;
  while(t--)
  {

  char text[1000100];
  char pat[1000010];
  scanf("%s %s",text,pat);
  int ans=KMPsearch(text,pat);
   cout<<"Case "<<kase+1<<": ";
    cout<<ans<<endl;
    kase++;
  }


///Before submit=>
///    *check for integer overflow,array bounds
///    *check for n=1
}

