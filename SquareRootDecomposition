#include<bits/stdc++.h>
using namespace std;


#define pb push_back
#define ll long long
#define pii pair<int,int>
#define pll pair<ll,ll>
#define M 100007
#define INF 1e9
#define INFL 1e18
#define PI acos(-1)
#define mp make_pair
#define fast_in_out ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
//const int fx[]= {+1,-1,+0,+0};
//const int fy[]= {+0,+0,+1,-1};
//const int fx[]={+0,+0,+1,-1,-1,+1,-1,+1};   // Kings Move
//const int fy[]={-1,+1,+0,+0,+1,+1,-1,-1};  // Kings Move
//const int fx[]={-2, -2, -1, -1,  1,  1,  2,  2};  // Knights Move
//const int fy[]={-1,  1, -2,  2, -2,  2, -1,  1}; // Knights Move


int segment[100100];
int input[100100];

int preprocess(int n)
{
    int current_segment=-1;
    int segment_size=sqrt(n);
    for(int i=0;i<n;i++)
    {
        if(i%segment_size==0)
        {
            current_segment++;
        }
        segment[current_segment]+=input[i];
    }
    
    return segment_size;
}


int query(int segment_size,int l,int r)
{
    //loop the first segment 
    //until we reach r or a starting index;
    while(l<r && l%segment_size!=0)
    {
        sum+=input[i];
        l++;
    }
    //loop until we reach 
    //segment that contains r
    while(l+segment_size<=r)
    {
        sum+=segment[l/segment_size];
        l+=segment_size;
    }
    //loop until r
    while(l<=r)
    {
        sum+=input[l];
        l++;
    }
    
    return sum;
}

void update(int segment_size,int i,int val)
{
    int segment_no=i/segment_size;
    segment[segment_no]-=input[i];
    segment[segment_no]+=val;
    input[i]=val;
}

int main()
{
    fast_in_out;
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);

}

