
//In the Name of Allah Most Gracious, Most Merciful//
/*If you want something you've never had, you have  to do something you never did.*/

#include<bits/stdc++.h>
using namespace std;


#define pb push_back
#define ll unsigned long long
#define pii pair<int,int>
#define pll pair<ll,ll>
#define M 100007
#define INF 1e9
#define INFL 1e18
#define PI acos(-1)
#define mp make_pair
#define fast_in_out ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
//const int fx[]= {+1,-1,+0,+0};
//const int fy[]= {+0,+0,+1,-1};
//const int fx[]={+0,+0,+1,-1,-1,+1,-1,+1};   // Kings Move
//const int fy[]={-1,+1,+0,+0,+1,+1,-1,-1};  // Kings Move
//const int fx[]={-2, -2, -1, -1,  1,  1,  2,  2};  // Knights Move
//const int fy[]={-1,  1, -2,  2, -2,  2, -1,  1}; // Knights Move


vector<int>adj[M],revAdj[M];
bool visited[M];
int leader[M],finish_time[M],order[M];
int t=-1,parent=0,V,E;



//running DFS on reverse Graph


void dfs_reverse(int v)
{
    visited[v]=true;
    for(int i=0;i<revAdj[v].size();i++)
    {
        int k=revAdj[v][i];
        if(visited[k]==false)
        {
            dfs_reverse(k);
        }
    }
    t++;
    finish_time[v]=t;
}


//running DFS on actual graph

void dfs(int v)
{
    visited[v]=true;
    leader[v]=parent;
   // cout<<v<<" ";
    for(int i=0;i<adj[v].size();i++)
    {
        int k=adj[v][i];
        if(visited[k]==false)
        {
            dfs(k);
        }
    }
}

//check if u & v are in the same component

bool stronglyConnected(int u,int v)
{
    return leader[u]==leader[v];
}


int main()
{
    fast_in_out;
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    int n,m;
    cin>>n>>m;
    for(int i=0;i<m;i++)
    {
        int x,y;
        cin>>x>>y;
        adj[x].pb(y);
        revAdj[y].pb(x);
    }

    memset(visited,false,sizeof visited);

    for(int i=0;i<n;i++)
    {
        if(visited[i]==false)
        {
            dfs_reverse(i);
        }
        order[finish_time[i]]=i;
    }
    memset(visited,false,sizeof visited);
    int countCC=0;
    for(int i=n-1;i>=0;i--)
    {
        if(!visited[i])
        {
            parent=order[i];
            dfs(order[i]);
            countCC++;
            //cout<<endl;
        }
    }
    cout<<countCC<<endl;
    return 0;
    /*
    int q;
    cin>>q;
    while(q--)
    {
        cin>>u>>v;
        if(stronglyConnected(u,v))
        {
            cout<<"YES"<<endl;
        }
        else
        {
            cout<<"NO"<<endl;
        }
    }
    */
    return 0;
}
